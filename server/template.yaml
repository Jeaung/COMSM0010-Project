AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    BeFree
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3


Resources:
    BefreeApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: prod
            Cors: "'*'"
            Auth:
                DefaultAuthorizer: BefreeAuthorizer
                Authorizers:
                    BefreeAuthorizer:
                        UserPoolArn: !GetAtt BefreeUserPool.Arn

    BefreeUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            UserPoolName: befree
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
            AutoVerifiedAttributes:
                - email
            Schema:
                - AttributeDataType: String
                  Name: email
                  Required: true

    BefreeUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref BefreeUserPool
            ClientName: befree
            GenerateSecret: false

    CommentFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: befree/
            Handler: app.commentHandler
            Runtime: nodejs8.10
            Events:
                Comment:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /comment
                        Method: post
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    BetFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.betHandler
            Runtime: nodejs8.10
            Events:
                Bet:
                    Type: Api
                    Properties:
                        Path: /bet
                        Method: post
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    LikeFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.likeHandler
            Runtime: nodejs8.10
            Events:
                Like:
                    Type: Api
                    Properties:
                        Path: /like
                        Method: post
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
    
    GetMatchesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.getMatchesHandler
            Runtime: nodejs8.10
            Events:
                GetMatches:
                    Type: Api
                    Properties:
                        Path: /matches
                        Method: get
                        RestApiId: !Ref BefreeApi
                        Auth:
                            Authorizer: NONE
        Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    MatchDetailFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.matchDetailHandler
            Runtime: nodejs8.10
            Events:
                MatchDetail:
                    Type: Api
                    Properties:
                        Path: /match
                        Method: get
                        RestApiId: !Ref BefreeApi
                        Auth:
                            Authorizer: NONE
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
    
    CrawlerFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: crawler.accountingHandler
            Runtime: nodejs8.10
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    ScheduledRule: 
        Type: "AWS::Events::Rule"
        Properties: 
            ScheduleExpression: "rate(10 minutes)"
            State: "ENABLED"
            Targets: 
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "CrawlerFunction"
                            - "Arn"
                    Id: "AccountingScheduler"

    PermissionForSchedulingCrawler:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "CrawlerFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "ScheduledRule"
                    - "Arn"
    
    BackingLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Policies:
                - 
                    PolicyName: BaseLambdaPolicy
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:DeleteItem
                                    - dynamodb:GetItem
                                    - dynamodb:BatchGetItem
                                    - dynamodb:BatchWriteItem
                                    - dynamodb:PutItem
                                    - dynamodb:Query
                                    - dynamodb:Scan
                                    - dynamodb:UpdateItem
                                Resource:
                                    Fn::Join:
                                        - ''
                                        - 
                                            - 'arn:aws:dynamodb:'
                                            - Ref: AWS::Region
                                            - ":"
                                            - Ref: AWS::AccountId
                                            - ":table/"
                                            - Ref: MatchTable
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: "*"

    MatchTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Match
            AttributeDefinitions:
                -
                    AttributeName: "Id"
                    AttributeType: "N"
            KeySchema:
                -
                    AttributeName: "Id"
                    KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5

    CommentsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Comment
            AttributeDefinitions:
                -
                    AttributeName: "MatchId"
                    AttributeType: "N"
            KeySchema:
                -
                    AttributeName: "MatchId"
                    KeyType: "HASH"
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
