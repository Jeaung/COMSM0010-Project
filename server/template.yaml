AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    BeFree
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3


Resources:
    BefreeApi:
        Type: AWS::Serverless::Api
        Properties:
            StageName: prod
            Cors:
                AllowMethods: "'GET,POST,DELETE,PUT,OPTIONS,OPTION'"
                AllowHeaders: "'content-type,authorization'"
                AllowOrigin: "'*'"
                MaxAge: "'3600'"
            Auth:
                Authorizers:
                    BefreeAuthorizer:
                        UserPoolArn: !GetAtt BefreeUserPool.Arn
                        Identity:
                            Header: Authorization

    BefreeUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            UserPoolName: befree
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
            AutoVerifiedAttributes:
                - email
            Schema:
                - AttributeDataType: String
                  Name: email
                  Required: true

    BefreeUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            UserPoolId: !Ref BefreeUserPool
            ClientName: befree
            GenerateSecret: false

    CommentFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: befree/
            Handler: app.commentHandler
            Runtime: nodejs8.10
            Events:
                Comment:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /comment
                        Method: post
                        RestApiId: !Ref BefreeApi
                        Auth:
                            Authorizer: BefreeAuthorizer
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    PermissionForWarmingCommentFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "CommentFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule1"
                    - "Arn"

    BetFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.betHandler
            Runtime: nodejs8.10
            Events:
                Bet:
                    Type: Api
                    Properties:
                        Path: /bet
                        Method: post
                        RestApiId: !Ref BefreeApi
                        Auth:
                            Authorizer: BefreeAuthorizer
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2   
                    
    PermissionForWarmingBetFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "BetFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule1"
                    - "Arn"

    GetBetPointsFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.getUserBettingPoints
            Runtime: nodejs8.10
            Events:
                GetBetPoints:
                    Type: Api
                    Properties:
                        Path: /getbetpoints
                        Method: get
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2   

    PermissionForWarmingGetBetPointsFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "GetBetPointsFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule1"
                    - "Arn"

    LikeFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.likeHandler
            Runtime: nodejs8.10
            Events:
                Like:
                    Type: Api
                    Properties:
                        Path: /like
                        Method: post
                        RestApiId: !Ref BefreeApi
                        Auth:
                            Authorizer: BefreeAuthorizer
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn

    PermissionForWarmingLikeFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "LikeFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule1"
                    - "Arn"

    GetRankingsFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.getRankings
            Runtime: nodejs8.10
            Events:
                GetRankings:
                    Type: Api
                    Properties:
                        Path: /rankings
                        Method: get
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2

    PermissionForWarmingGetRankingsFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "GetRankingsFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule2"
                    - "Arn"
    
    GetMatchesFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.getMatchesHandler
            Runtime: nodejs8.10
            Events:
                GetMatches:
                    Type: Api
                    Properties:
                        Path: /matches
                        Method: get
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2
    
    PermissionForWarmingGetMatchesFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "GetMatchesFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule1"
                    - "Arn"

    MatchDetailFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: app.matchDetailHandler
            Runtime: nodejs8.10
            Events:
                MatchDetail:
                    Type: Api
                    Properties:
                        Path: /match
                        Method: get
                        RestApiId: !Ref BefreeApi
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2

    PermissionForWarmingMatchDetailFunction:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "MatchDetailFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "WarmerScheduledRule2"
                    - "Arn"
    
    CrawlerFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: crawler.accountingHandler
            Runtime: nodejs8.10
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2
    
    InitFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: befree/
            Handler: init.initHandler
            Runtime: nodejs8.10
            Role:
                Fn::GetAtt:
                    - BackingLambdaExecutionRole
                    - Arn
            VpcConfig:
                SecurityGroupIds:
                    -
                        Fn::GetAtt:
                            - SecurityGroup
                            - GroupId
                SubnetIds:
                    - Ref: Subnet1
                    - Ref: Subnet2                   

    CrawlerScheduledRule: 
        Type: "AWS::Events::Rule"
        Properties: 
            ScheduleExpression: "cron(0 1 * * ? *)"
            State: "ENABLED"
            Targets: 
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "CrawlerFunction"
                            - "Arn"
                    Id: "AccountingScheduler"

    PermissionForSchedulingCrawler:
        Type: "AWS::Lambda::Permission"
        Properties: 
            FunctionName: 
                Ref: "CrawlerFunction"
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: 
                Fn::GetAtt: 
                    - "CrawlerScheduledRule"
                    - "Arn"

    WarmerScheduledRule1: 
        Type: "AWS::Events::Rule"
        Properties: 
            ScheduleExpression: "cron(0/10 * * * ? *)"
            State: "ENABLED"
            Targets: 
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "CommentFunction"
                            - "Arn"
                    Id: "WarmCommentFunction"
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "BetFunction"
                            - "Arn"
                    Id: "WarmBetFunction"
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "LikeFunction"
                            - "Arn"
                    Id: "WarmLikeFunction"
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "GetBetPointsFunction"
                            - "Arn"
                    Id: "WarmGetBetPointsFunction"
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "GetMatchesFunction"
                            - "Arn"
                    Id: "WarmGetMatchesFunction"

    WarmerScheduledRule2: 
        Type: "AWS::Events::Rule"
        Properties: 
            ScheduleExpression: "cron(0/10 * * * ? *)"
            State: "ENABLED"
            Targets: 
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "GetRankingsFunction"
                            - "Arn"
                    Id: "WarmGetRankingsFunction"
                - 
                    Arn: 
                        Fn::GetAtt: 
                            - "MatchDetailFunction"
                            - "Arn"
                    Id: "WarmMatchDetailFunction"
    
    BackingLambdaExecutionRole:
        DependsOn: CommentTable
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - 
                        Effect: Allow
                        Principal:
                            Service:
                                - lambda.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Policies:
                - 
                    PolicyName: BaseLambdaPolicy
                    PolicyDocument:
                        Version: '2012-10-17'
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:DeleteItem
                                    - dynamodb:GetItem
                                    - dynamodb:BatchGetItem
                                    - dynamodb:BatchWriteItem
                                    - dynamodb:PutItem
                                    - dynamodb:Query
                                    - dynamodb:Scan
                                    - dynamodb:UpdateItem
                                Resource:
                                    Fn::Join:
                                        - ''
                                        - 
                                            - 'arn:aws:dynamodb:'
                                            - Ref: AWS::Region
                                            - ":"
                                            - Ref: AWS::AccountId
                                            - ":table/"
                                            - Ref: CommentTable
                            - 
                                Effect: Allow
                                Action:
                                    - dynamodb:DeleteItem
                                    - dynamodb:GetItem
                                    - dynamodb:BatchGetItem
                                    - dynamodb:BatchWriteItem
                                    - dynamodb:PutItem
                                    - dynamodb:Query
                                    - dynamodb:Scan
                                    - dynamodb:UpdateItem
                                Resource:
                                    Fn::Join:
                                        - ''
                                        - 
                                            - 'arn:aws:dynamodb:'
                                            - Ref: AWS::Region
                                            - ":"
                                            - Ref: AWS::AccountId
                                            - ":table/"
                                            - Ref: CommentTable
                                            - "/index/CommentSI"
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: "*"
                            -
                                Effect: Allow
                                Action:
                                    - ec2:CreateNetworkInterface
                                    - ec2:DescribeNetworkInterfaces
                                    - ec2:DeleteNetworkInterface
                                Resource: "*"

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 172.16.0.0/16
            EnableDnsSupport: true

    Subnet1:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: eu-west-2a
            CidrBlock: 172.16.1.0/24
            VpcId:
                Ref: VPC

    Subnet2:
        Type: AWS::EC2::Subnet
        Properties:
            AvailabilityZone: eu-west-2b
            CidrBlock: 172.16.2.0/24
            VpcId:
                Ref: VPC
    
    PublicSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: eu-west-2a
          CidrBlock: 172.16.3.0/24
          MapPublicIpOnLaunch: true
     
    PublicSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: eu-west-2b
          CidrBlock: 172.16.4.0/24
          MapPublicIpOnLaunch: true

    BefreeInternetGateway:
        Type: "AWS::EC2::InternetGateway"

    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId:
                Ref: VPC
            InternetGatewayId:
                Ref: BefreeInternetGateway

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
    
    PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: AttachGateway
        Properties:
            RouteTableId:
                Ref: PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: 
                Ref: BefreeInternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref PublicSubnet1
          RouteTableId: !Ref PublicRouteTable
     
    PublicSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref PublicSubnet2
          RouteTableId: !Ref PublicRouteTable

    NatGateway:
        Type: AWS::EC2::NatGateway
        DependsOn: NatPublicIP
        Properties:
            AllocationId:
                Fn::GetAtt:
                    - NatPublicIP
                    - AllocationId
            SubnetId:
                Ref: PublicSubnet1

    NatPublicIP:
        Type: "AWS::EC2::EIP"
        DependsOn: VPC
        Properties:
            Domain: vpc

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: VPC
    
    PrivateRoute:
        Type: 'AWS::EC2::Route'
        Properties:
          RouteTableId: !Ref PrivateRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway

    Subnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: Subnet1
            RouteTableId:
                Ref: PrivateRouteTable

    Subnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: Subnet2
            RouteTableId:
                Ref: PrivateRouteTable 

    SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                Ref: VPC
            GroupDescription: Enable database access for application
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '3306'
                    ToPort: '3306'
                    CidrIp: 0.0.0.0/0

    DBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: DBSubnetGroup
            SubnetIds:
                - Ref: Subnet1
                - Ref: Subnet2

    BefreeDB: 
        Type: "AWS::RDS::DBInstance"
        Properties: 
            DBInstanceIdentifier: "befree"
            DBName: "befree"
            AllocatedStorage: "100"
            DBInstanceClass: "db.t2.micro"
            Iops: "1000"
            Engine: "MySQL"
            EngineVersion: "5.6"
            MasterUsername: "befree"
            MasterUserPassword: "12345678"
            DBSubnetGroupName: 
                Ref: DBSubnetGroup
            VPCSecurityGroups:
                - Ref: SecurityGroup
        DeletionPolicy: "Snapshot"

    CommentTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: Comment
            AttributeDefinitions:
                -
                    AttributeName: "MatchId"
                    AttributeType: "N"
                - 
                    AttributeName: "User"
                    AttributeType: "S"
                -
                    AttributeName: "Created"
                    AttributeType: "N"
            KeySchema:
                -
                    AttributeName: "MatchId"
                    KeyType: "HASH"
                - 
                    AttributeName: "User"
                    KeyType: "RANGE"
            LocalSecondaryIndexes:
                - 
                    IndexName: "CommentSI"
                    KeySchema: 
                        - 
                            AttributeName: "MatchId"
                            KeyType: "HASH"
                        - 
                            AttributeName: "Created"
                            KeyType: "RANGE"
                    Projection:
                        ProjectionType: ALL
            ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5               
