AWSTemplateFormatVersion: '2010-09-09'
Description: 'BeFree

  '
Globals:
  Function:
    Timeout: 3
Resources:
  AttachGateway:
    Properties:
      InternetGatewayId:
        Ref: BefreeInternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  BackingLambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:dynamodb:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :table/
                - Ref: CommentTable
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          - Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: BaseLambdaPolicy
    Type: AWS::IAM::Role
  BefreeApi:
    Properties:
      Auth:
        Authorizers:
          BefreeAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - BefreeUserPool
              - Arn
        DefaultAuthorizer: BefreeAuthorizer
      Cors: '''*'''
      StageName: prod
    Type: AWS::Serverless::Api
  BefreeDB:
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: '100'
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: befree
      DBName: befree
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      Engine: MySQL
      EngineVersion: '5.6'
      Iops: '1000'
      MasterUserPassword: '12345678'
      MasterUsername: befree
      VPCSecurityGroups:
      - Ref: SecurityGroup
    Type: AWS::RDS::DBInstance
  BefreeInternetGateway:
    Type: AWS::EC2::InternetGateway
  BefreeUserPool:
    Properties:
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
      - AttributeDataType: String
        Name: email
        Required: true
      UserPoolName: befree
    Type: AWS::Cognito::UserPool
  BefreeUserPoolClient:
    Properties:
      ClientName: befree
      GenerateSecret: false
      UserPoolId:
        Ref: BefreeUserPool
    Type: AWS::Cognito::UserPoolClient
  BetFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Events:
        Bet:
          Properties:
            Method: post
            Path: /bet
            RestApiId:
              Ref: BefreeApi
          Type: Api
      Handler: app.betHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  CommentFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Events:
        Comment:
          Properties:
            Method: post
            Path: /comment
            RestApiId:
              Ref: BefreeApi
          Type: Api
      Handler: app.commentHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  CommentTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: MatchId
        AttributeType: N
      KeySchema:
      - AttributeName: MatchId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: Comment
    Type: AWS::DynamoDB::Table
  CrawlerFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Handler: crawler.accountingHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
        SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
    Type: AWS::Serverless::Function
  DBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: DBSubnetGroup
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
    Type: AWS::RDS::DBSubnetGroup
  GetMatchesFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Events:
        GetMatches:
          Properties:
            Auth:
              Authorizer: NONE
            Method: get
            Path: /matches
            RestApiId:
              Ref: BefreeApi
          Type: Api
      Handler: app.getMatchesHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
        SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
    Type: AWS::Serverless::Function
  InitFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Handler: init.initHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
        SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
    Type: AWS::Serverless::Function
  LikeFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Events:
        Like:
          Properties:
            Method: post
            Path: /like
            RestApiId:
              Ref: BefreeApi
          Type: Api
      Handler: app.likeHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  MatchDetailFunction:
    Properties:
      CodeUri: s3://befree-bruce-jeaung-pre/e5b16bbe66467191bfd9d48b0b031ad2
      Events:
        MatchDetail:
          Properties:
            Auth:
              Authorizer: NONE
            Method: get
            Path: /match
            RestApiId:
              Ref: BefreeApi
          Type: Api
      Handler: app.matchDetailHandler
      Role:
        Fn::GetAtt:
        - BackingLambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - SecurityGroup
          - GroupId
        SubnetIds:
        - Ref: Subnet1
        - Ref: Subnet2
    Type: AWS::Serverless::Function
  NatGateway:
    DependsOn: NatPublicIP
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatPublicIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
    Type: AWS::EC2::NatGateway
  NatPublicIP:
    DependsOn: VPC
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  PermissionForSchedulingCrawler:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CrawlerFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - ScheduledRule
        - Arn
    Type: AWS::Lambda::Permission
  PrivateRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
      RouteTableId:
        Ref: PrivateRouteTable
    Type: AWS::EC2::Route
  PrivateRouteTable:
    Properties:
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PublicRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: BefreeInternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone: eu-west-2a
      CidrBlock: 172.16.3.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone: eu-west-2b
      CidrBlock: 172.16.4.0/24
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnet2RouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  ScheduledRule:
    Properties:
      ScheduleExpression: cron(0 1 * * ? *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - CrawlerFunction
          - Arn
        Id: AccountingScheduler
    Type: AWS::Events::Rule
  SecurityGroup:
    Properties:
      GroupDescription: Enable database access for application
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '3306'
        IpProtocol: tcp
        ToPort: '3306'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  Subnet1:
    Properties:
      AvailabilityZone: eu-west-2a
      CidrBlock: 172.16.1.0/24
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  Subnet1RouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: Subnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  Subnet2:
    Properties:
      AvailabilityZone: eu-west-2b
      CidrBlock: 172.16.2.0/24
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  Subnet2RouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: Subnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsSupport: true
    Type: AWS::EC2::VPC
Transform: AWS::Serverless-2016-10-31
